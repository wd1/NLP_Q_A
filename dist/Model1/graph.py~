#!/usr/bin/python

import networkx as nx
import matplotlib.pyplot as plt
import csv

graph = []
labels = []
qwords = []
category_dict = {}

with open('q_dependencies.txt', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in spamreader:
        if len(row) == 3:
            qwords.append(row[0])
            qwords.append(row[2])
            category_dict[row[0]]='q'
            category_dict[row[2]]='q'
            
with open('doc_dependencies.txt', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in spamreader:
        if len(row) == 3:
            if row[0] in qwords and row[2] in qwords:
                graph.append((row[0], row[2]))
                labels.append(row[1])
            elif row[0] in qwords or row[2] in qwords:
                graph.append((row[0], row[2]))
                labels.append(row[1])
                if row[0] in qwords:
                    category_dict[row[2]]='doc'
                else:
                    category_dict[row[0]]='doc'
            
print graph
print labels

def draw_graph(graph, labels=None, graph_layout='spring',
               node_size=4000, node_color='blue', node_alpha=0.5,
               node_text_size=10,
               edge_color='blue', edge_alpha=0.2, edge_tickness=1,
               edge_text_pos=0.5,
               text_font='sans-serif'):

    # create networkx graph
    G=nx.Graph()

    # add edges
    for edge in graph:
        G.add_edge(edge[0], edge[1])

    # these are different layouts for the network you may try
    # shell seems to work best
    if graph_layout == 'spring':
        graph_pos=nx.spring_layout(G)
    elif graph_layout == 'spectral':
        graph_pos=nx.spectral_layout(G)
    elif graph_layout == 'random':
        graph_pos=nx.random_layout(G)
    else:
        graph_pos=nx.shell_layout(G)

    # print graph_pos
    for node in G.nodes():
        G.node[node]['category'] = category_dict[node]

    color_map = {'q':'b', 'doc':'r'} 

    # draw graph
    nodes = nx.draw_networkx_nodes(G,graph_pos,node_size=node_size, 
                           alpha=node_alpha, node_color=[color_map[G.node[node]['category']] for node in G])
    nx.draw_networkx_edges(G,graph_pos,width=edge_tickness,
                           alpha=edge_alpha,edge_color=edge_color)
    nx.draw_networkx_labels(G, graph_pos,font_size=node_text_size,
                            font_family=text_font)

    nodes.set_edgecolor([color_map[G.node[node]['category']] for node in G])

    if labels is None:
        labels = range(len(graph))

    edge_labels = dict(zip(graph, labels))
    nx.draw_networkx_edge_labels(G, graph_pos, edge_labels=edge_labels, 
                                 label_pos=edge_text_pos)

    # show graph
    plt.show()

# graph = [(0, 1), (1, 5), (1, 7), (4, 5), (4, 8), (1, 6), (3, 7), (5, 9),
#          (2, 4), (0, 4), (2, 5), (3, 6), (8, 9)]

# you may name your edge labels
# labels = map(chr, range(65, 65+len(graph)))
# print labels
draw_graph(graph, labels)

# if edge labels is not specified, numeric labels (0, 1, 2...) will be used
# draw_graph(graph)